# -*- coding: utf-8 -*-
import datetime
import xmlsec
from lxml import etree
from uuid import uuid4

from eet.request_header import EETRequestHeader
from eet.request_data import EETRequestData
from eet.request_control import EETRequestControl
from eet.utils import *
from eet.config import Config

# SOAP envelope
SOAP_NS = 'http://schemas.xmlsoap.org/soap/envelope/'
EXC_NS = 'http://www.w3.org/2001/10/xml-exc-c14n#'
# xmldsig
DS_NS = 'http://www.w3.org/2000/09/xmldsig#'
# xmlenc
ENC_NS = 'http://www.w3.org/2001/04/xmlenc#'

WSS_BASE = 'http://docs.oasis-open.org/wss/2004/01/'
# WS-Security
WSSE_NS = WSS_BASE + 'oasis-200401-wss-wssecurity-secext-1.0.xsd'
# WS-Utility
WSU_NS = WSS_BASE + 'oasis-200401-wss-wssecurity-utility-1.0.xsd'

BASE64B = WSS_BASE + 'oasis-200401-wss-soap-message-security-1.0#Base64Binary'
X509TOKEN = WSS_BASE + 'oasis-200401-wss-x509-token-profile-1.0#X509v3'

def ns(namespace, tagname):
    return '{%s}%s' % (namespace, tagname)

def get_unique_id():
    return 'id-{0}'.format(uuid4())

def ensure_id(node):
    """Ensure given node has a wsu:Id attribute; add unique one if not.
    Return found/created attribute value.
    """
    id_val = node.get(ID_ATTR)
    if not id_val:
        id_val = get_unique_id()
        node.set(ID_ATTR, id_val)
    return id_val


ID_ATTR = ns(WSU_NS, 'Id')

class EETRequest(object):

    @staticmethod
    def test():
        config = Config()
        return EETRequest(config, date=datetime.datetime(2016,8,5,0,30,12,0, timezone), price_sum=34113.00, price_sum_normal_vat=100, normal_vat_sum=21, number='0/6460/ZQ42')


    def __init__(self, config, **kwargs):
        self.config = config
        self.header = EETRequestHeader(config)
        self.data = EETRequestData(config, **kwargs)
        self.code = EETRequestControl(config, self.data.getSignData())

    def _serialize(self):
        trzba = [
                    '<Trzba xmlns="http://fs.mfcr.cz/eet/schema/v3">',
                    self.header.serialize(),
                    self.data.serialize(),
                    self.code.serialize(),
                    '</Trzba>'
                    ]
        header = [
                    u'<SOAP-ENV:Header xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/">',
                        u'<wsse:Security xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" soap:mustUnderstand="1">',
                            u'<wsse:BinarySecurityToken EncodingType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-soap-message-security-1.0#Base64Binary" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3" wsu:Id="X509-A72D6FD4C41B1F545F14700558808131">',
                            u'</wsse:BinarySecurityToken>',
                        u'</wsse:Security>',
                    u'</SOAP-ENV:Header>',
            ]
        body = [
            u'<soap:Body xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="id-A72D6FD4C41B1F545F14700558808234">',
            u'\n'.join(trzba),
            u'</soap:Body>',
        ]

        envelope = [
                u'<?xml version="1.0" encoding="UTF-8"?>'
                u'<soap:Envelope xmlns:soap="http://schemas.xmlsoap.org/soap/envelope/">',
                    u'\n'.join(header),
                    u'\n'.join(body),
                u'</soap:Envelope>'
            ]
        return u'\n'.join(envelope)

    def serialize(self):
        doc = etree.fromstring(self._serialize().encode('utf8'))
        signature = xmlsec.template.create(
                        doc,
                        xmlsec.Transform.EXCL_C14N,
                        xmlsec.Transform.RSA_SHA256,
                        name=u'Signature',
        )

        key_info = xmlsec.template.ensure_key_info(signature)
        #x509_data = xmlsec.template.add_x509_data(key_info)

        self.key = key = xmlsec.Key.from_memory(self.config.key, xmlsec.KeyFormat.PEM)
        key.load_cert_from_memory(self.config.root_crt, xmlsec.KeyFormat.PEM)

        header = doc.find(ns(SOAP_NS, 'Header'))
        security = header.find(ns(WSSE_NS, 'Security'))
        token = security.find(ns(WSSE_NS, 'BinarySecurityToken'))
        token.text = self.config.cert[28:-26].replace('\n','')
        token_id = ensure_id(token)
        security.insert(1, signature)

        security_token_reference = etree.fromstring('''
        <wsse:SecurityTokenReference xmlns:wsse="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-secext-1.0.xsd" xmlns:wsu="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-wssecurity-utility-1.0.xsd" wsu:Id="STR-A72D6FD4C41B1F545F14700558808183">
            <wsse:Reference URI="#%s" ValueType="http://docs.oasis-open.org/wss/2004/01/oasis-200401-wss-x509-token-profile-1.0#X509v3"/>
        </wsse:SecurityTokenReference>
        ''' % token_id)
        key_info.insert(0, security_token_reference)

        ctx = xmlsec.SignatureContext()
        ctx.key = key
        target = doc.find(ns(SOAP_NS, 'Body'))
        node_id = ensure_id(target)
        ref = xmlsec.template.add_reference(signature, xmlsec.Transform.SHA256, uri='#' + node_id)
        transform = xmlsec.template.add_transform(ref, xmlsec.Transform.EXCL_C14N)
        ctx.register_id(target, 'Id', WSU_NS)
        ctx.sign(signature)

        i1 = signature.find(ns(DS_NS, 'CanonicalizationMethod'))
        i1.insert(0,  etree.Element(ns(EXC_NS, 'InclusiveNamespaces'), attrib={'PrefixList':'soap'}))

        i2 = signature.find(ns(DS_NS, 'Transform'))
        i2.insert(0,  etree.Element(ns(EXC_NS, 'InclusiveNamespaces'), attrib={'PrefixList':''}))

        #sec_token_ref = etree.SubElement(
        #key_info, ns(WSSE_NS, 'SecurityTokenReference'))
        #sec_token_ref.append(x509_data)
        self.ctx = ctx
        return etree.tostring(doc)
